const fTable = {
"0.05": {
        1: { 1: 161.45, 2: 18.51, 3: 10.13, 4: 7.71, 5: 6.61, 6: 5.99, 7: 5.59, 8: 5.32, 9: 5.12, 10: 4.96, 20: 4.35, 30: 4.17, 40: 4.08, 50: 4.03, 60: 4.00 },
        2: { 1: 199.50, 2: 19.00, 3: 10.44, 4: 7.96, 5: 6.94, 6: 6.39, 7: 6.04, 8: 5.81, 9: 5.63, 10: 5.48, 20: 4.49, 30: 4.30, 40: 4.21, 50: 4.15, 60: 4.12 },
        3: { 1: 215.71, 2: 19.16, 3: 10.54, 4: 8.02, 5: 7.00, 6: 6.45, 7: 6.10, 8: 5.86, 9: 5.68, 10: 5.53, 20: 4.54, 30: 4.35, 40: 4.26, 50: 4.20, 60: 4.17 },
        4: { 1: 224.58, 2: 19.25, 3: 10.59, 4: 8.06, 5: 7.04, 6: 6.49, 7: 6.14, 8: 5.90, 9: 5.72, 10: 5.56, 20: 4.57, 30: 4.38, 40: 4.29, 50: 4.23, 60: 4.20 },
        5: { 1: 230.16, 2: 19.30, 3: 10.62, 4: 8.08, 5: 7.06, 6: 6.52, 7: 6.17, 8: 5.93, 9: 5.75, 10: 5.59, 20: 4.59, 30: 4.40, 40: 4.31, 50: 4.25, 60: 4.22 },
        6: { 1: 234.00, 2: 19.33, 3: 10.64, 4: 8.10, 5: 7.08, 6: 6.54, 7: 6.19, 8: 5.95, 9: 5.77, 10: 5.61, 20: 4.60, 30: 4.41, 40: 4.32, 50: 4.26, 60: 4.23 },
        7: { 1: 236.77, 2: 19.36, 3: 10.66, 4: 8.12, 5: 7.10, 6: 6.56, 7: 6.21, 8: 5.97, 9: 5.79, 10: 5.63, 20: 4.61, 30: 4.42, 40: 4.33, 50: 4.27, 60: 4.24 },
        8: { 1: 238.88, 2: 19.38, 3: 10.67, 4: 8.13, 5: 7.11, 6: 6.58, 7: 6.23, 8: 5.99, 9: 5.81, 10: 5.65, 20: 4.62, 30: 4.43, 40: 4.34, 50: 4.28, 60: 4.25 },
        9: { 1: 240.54, 2: 19.40, 3: 10.68, 4: 8.14, 5: 7.12, 6: 6.59, 7: 6.24, 8: 6.00, 9: 5.82, 10: 5.66, 20: 4.63, 30: 4.44, 40: 4.35, 50: 4.29, 60: 4.26 },
        10: { 1: 241.88, 2: 19.41, 3: 10.69, 4: 8.15, 5: 7.13, 6: 6.60, 7: 6.25, 8: 6.01, 9: 5.83, 10: 5.67, 20: 4.64, 30: 4.45, 40: 4.36, 50: 4.30, 60: 4.27 },
        20: { 1: 244.92, 2: 19.44, 3: 10.71, 4: 8.16, 5: 7.14, 6: 6.61, 7: 6.26, 8: 6.02, 9: 5.84, 10: 5.68, 20: 4.65, 30: 4.46, 40: 4.37, 50: 4.31, 60: 4.28 },
        30: { 1: 246.24, 2: 19.45, 3: 10.72, 4: 8.17, 5: 7.15, 6: 6.62, 7: 6.27, 8: 6.03, 9: 5.85, 10: 5.69, 20: 4.66, 30: 4.47, 40: 4.38, 50: 4.32, 60: 4.29 },
        40: { 1: 247.18, 2: 19.46, 3: 10.73, 4: 8.18, 5: 7.16, 6: 6.63, 7: 6.28, 8: 6.04, 9: 5.86, 10: 5.70, 20: 4.67, 30: 4.48, 40: 4.39, 50: 4.33, 60: 4.30 },
        50: { 1: 247.88, 2: 19.47, 3: 10.74, 4: 8.19, 5: 7.17, 6: 6.64, 7: 6.29, 8: 6.05, 9: 5.87, 10: 5.71, 20: 4.68, 30: 4.49, 40: 4.40, 50: 4.34, 60: 4.31 },
        60: { 1: 248.42, 2: 19.48, 3: 10.75, 4: 8.20, 5: 7.18, 6: 6.65, 7: 6.30, 8: 6.06, 9: 5.88, 10: 5.72, 20: 4.69, 30: 4.50, 40: 4.41, 50: 4.35, 60: 4.32 }
    },
    "0.01": {
        1: { 1: 4052.18, 2: 98.50, 3: 34.12, 4: 21.20, 5: 16.26, 6: 13.74, 7: 12.25, 8: 11.26, 9: 10.56, 10: 10.04, 20: 8.26, 30: 7.76, 40: 7.51, 50: 7.36, 60: 7.26 },
        2: { 1: 5000.50, 2: 99.25, 3: 34.45, 4: 21.37, 5: 16.45, 6: 13.90, 7: 12.40, 8: 11.40, 9: 10.69, 10: 10.17, 20: 8.43, 30: 7.92, 40: 7.66, 50: 7.51, 60: 7.41 },
        3: { 1: 5400.32, 2: 99.35, 3: 34.52, 4: 21.42, 5: 16.50, 6: 13.96, 7: 12.46, 8: 11.45, 9: 10.73, 10: 10.21, 20: 8.48, 30: 7.97, 40: 7.71, 50: 7.56, 60: 7.46 },
        4: { 1: 5624.62, 2: 99.40, 3: 34.55, 4: 21.44, 5: 16.52, 6: 14.00, 7: 12.50, 8: 11.49, 9: 10.77, 10: 10.24, 20: 8.51, 30: 8.00, 40: 7.74, 50: 7.59, 60: 7.49 },
        5: { 1: 5778.06, 2: 99.43, 3: 34.57, 4: 21.45, 5: 16.53, 6: 14.02, 7: 12.52, 8: 11.51, 9: 10.79, 10: 10.26, 20: 8.53, 30: 8.02, 40: 7.76, 50: 7.61, 60: 7.51 },
        6: { 1: 5888.55, 2: 99.45, 3: 34.58, 4: 21.46, 5: 16.54, 6: 14.04, 7: 12.54, 8: 11.53, 9: 10.81, 10: 10.28, 20: 8.55, 30: 8.04, 40: 7.78, 50: 7.63, 60: 7.53 },
        7: { 1: 5972.71, 2: 99.46, 3: 34.59, 4: 21.47, 5: 16.54, 6: 14.05, 7: 12.56, 8: 11.54, 9: 10.82, 10: 10.29, 20: 8.56, 30: 8.05, 40: 7.79, 50: 7.64, 60: 7.54 },
        8: { 1: 6037.82, 2: 99.47, 3: 34.60, 4: 21.47, 5: 16.55, 6: 14.06, 7: 12.57, 8: 11.55, 9: 10.83, 10: 10.30, 20: 8.57, 30: 8.06, 40: 7.80, 50: 7.65, 60: 7.55 },
        9: { 1: 6090.50, 2: 99.48, 3: 34.60, 4: 21.48, 5: 16.55, 6: 14.07, 7: 12.58, 8: 11.56, 9: 10.84, 10: 10.31, 20: 8.58, 30: 8.07, 40: 7.81, 50: 7.66, 60: 7.56 },
        10: { 1: 6135.17, 2: 99.49, 3: 34.61, 4: 21.48, 5: 16.55, 6: 14.08, 7: 12.59, 8: 11.57, 9: 10.85, 10: 10.32, 20: 8.59, 30: 8.08, 40: 7.82, 50: 7.67, 60: 7.57 },
        20: { 1: 6220.00, 2: 99.50, 3: 34.62, 4: 21.49, 5: 16.56, 6: 14.09, 7: 12.60, 8: 11.58, 9: 10.86, 10: 10.33, 20: 8.60, 30: 8.09, 40: 7.83, 50: 7.68, 60: 7.58 },
        30: { 1: 6260.00, 2: 99.51, 3: 34.63, 4: 21.50, 5: 16.57, 6: 14.10, 7: 12.61, 8: 11.59, 9: 10.87, 10: 10.34, 20: 8.61, 30: 8.10, 40: 7.84, 50: 7.69, 60: 7.59 },
        40: { 1: 6285.00, 2: 99.52, 3: 34.64, 4: 21.51, 5: 16.58, 6: 14.11, 7: 12.62, 8: 11.60, 9: 10.88, 10: 10.35, 20: 8.62, 30: 8.11, 40: 7.85, 50: 7.70, 60: 7.60 },
        50: { 1: 6300.00, 2: 99.53, 3: 34.65, 4: 21.52, 5: 16.59, 6: 14.12, 7: 12.63, 8: 11.61, 9: 10.89, 10: 10.36, 20: 8.63, 30: 8.12, 40: 7.86, 50: 7.71, 60: 7.61 },
        60: { 1: 6310.00, 2: 99.54, 3: 34.66, 4: 21.53, 5: 16.60, 6: 14.13, 7: 12.64, 8: 11.62, 9: 10.90, 10: 10.37, 20: 8.64, 30: 8.13, 40: 7.87, 50: 7.72, 60: 7.62 }
    },
    "0.10": {
        1: { 1: 39.86, 2: 8.53, 3: 5.39, 4: 4.54, 5: 4.06, 6: 3.78, 7: 3.59, 8: 3.45, 9: 3.34, 10: 3.26 },
        2: { 1: 48.00, 2: 9.16, 3: 5.73, 4: 4.76, 5: 4.26, 6: 3.96, 7: 3.77, 8: 3.63, 9: 3.52, 10: 3.44 },
        3: { 1: 51.32, 2: 9.38, 3: 5.85, 4: 4.84, 5: 4.33, 6: 4.02, 7: 3.83, 8: 3.68, 9: 3.56, 10: 3.48 },
        4: { 1: 53.21, 2: 9.50, 3: 5.92, 4: 4.89, 5: 4.37, 6: 4.06, 7: 3.87, 8: 3.72, 9: 3.60, 10: 3.51 },
        5: { 1: 54.30, 2: 9.57, 3: 5.96, 4: 4.92, 5: 4.40, 6: 4.08, 7: 3.89, 8: 3.74, 9: 3.62, 10: 3.54 },
    },
};
  
  
  document.getElementById("calculateBtn").addEventListener("click", () => {
    const loader = document.getElementById("loader");
    const results = document.getElementById("results");
    const fileInput = document.getElementById("fileInput").files[0];
    const significanceLevel = document.getElementById("significanceLevel").value;
  
    // Show loader and hide results
    loader.classList.remove("hidden");
    results.classList.add("hidden");
  
    if (!fileInput) {
      alert("Please upload a dataset.");
      loader.classList.add("hidden");
      return;
    }
  
    const reader = new FileReader();
  
    reader.onload = function (event) {
      const data = parseCSV(event.target.result);
      const { betweenVariance, withinVariance } = calculateVariances(data);
  
      // Calculate F-value
      const fValue = betweenVariance / withinVariance;
  
      // Calculate degrees of freedom
      const k = data.length;
      const N = data.flat().length;
      const df1 = k - 1;
      const df2 = N - k;
  
      // Lookup critical value
      const criticalValue = fTable[significanceLevel]?.[df1]?.[df2] || "N/A";
  
      setTimeout(() => {
        loader.classList.add("hidden");
        results.classList.remove("hidden");
  
        // Display results
        document.getElementById("fValue").textContent = `F-Value: ${fValue.toFixed(2)}`;
        document.getElementById("df1").innerHTML = `df<sub>1</sub>: ${df1}`;
        document.getElementById("df2").innerHTML = `df<sub>2</sub>: ${df2}`;
        document.getElementById("criticalValue").textContent = `Critical F-Value: ${criticalValue.toFixed(2)}`;
        document.getElementById("conclusion").textContent =
          criticalValue !== "N/A" && fValue > criticalValue
            ? "Conclusion: Reject the Null Hypothesis (H0)"
            : "Conclusion: Fail to Reject the Null Hypothesis (H0)";
      }, 1200); // Simulated loading time
    };
  
    reader.readAsText(fileInput);
  });
  
  function parseCSV(data) {
    const rows = data.split("\n").filter(row => row.trim() !== "");
    return rows.map(row => row.split(",").map(Number));
  }
  
  function calculateVariances(data) {
    const groupMeans = data.map(group => mean(group));
    const overallMean = mean(data.flat());
  
    const betweenVariance = (data[0].length / data.length) * groupMeans.reduce((sum, gm) => sum + Math.pow(gm - overallMean, 2), 0);
    const withinVariance = data.reduce((sum, group) => sum + group.reduce((subSum, val) => subSum + Math.pow(val - mean(group), 2), 0), 0);
  
    return { betweenVariance, withinVariance };
  }
  
  function mean(arr) {
    return arr.reduce((sum, val) => sum + val, 0) / arr.length;
  }
  